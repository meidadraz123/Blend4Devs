//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.OurSampleData
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class OurSampleData { }
#else

    public class OurSampleData : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public OurSampleData()
        {
            try
            {
                Uri resourceUri = new Uri("/AdvancedBlendWpf;component/SampleData/OurSampleData/OurSampleData.xaml", UriKind.RelativeOrAbsolute);
                System.Windows.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private Games _Games = new Games();

        public Games Games
        {
            get
            {
                return this._Games;
            }
        }

        private sample_texts _sample_texts = new sample_texts();

        public sample_texts sample_texts
        {
            get
            {
                return this._sample_texts;
            }
        }
    }

    public class Games : System.Collections.ObjectModel.ObservableCollection<GamesItem>
    { 
    }

    public class GamesItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Name = string.Empty;

        public string Name
        {
            get
            {
                return this._Name;
            }

            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private double _Price = 0;

        public double Price
        {
            get
            {
                return this._Price;
            }

            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.OnPropertyChanged("Price");
                }
            }
        }

        private string _ReleaseDate = string.Empty;

        public string ReleaseDate
        {
            get
            {
                return this._ReleaseDate;
            }

            set
            {
                if (this._ReleaseDate != value)
                {
                    this._ReleaseDate = value;
                    this.OnPropertyChanged("ReleaseDate");
                }
            }
        }

        private System.Windows.Media.ImageSource _CoverImage = null;

        public System.Windows.Media.ImageSource CoverImage
        {
            get
            {
                return this._CoverImage;
            }

            set
            {
                if (this._CoverImage != value)
                {
                    this._CoverImage = value;
                    this.OnPropertyChanged("CoverImage");
                }
            }
        }
    }

    public class sample_textsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _song_name = string.Empty;

        public string song_name
        {
            get
            {
                return this._song_name;
            }

            set
            {
                if (this._song_name != value)
                {
                    this._song_name = value;
                    this.OnPropertyChanged("song_name");
                }
            }
        }
    }

    public class sample_texts : System.Collections.ObjectModel.ObservableCollection<sample_textsItem>
    { 
    }
#endif
}
